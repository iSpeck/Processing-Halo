// HALO
size(525,705);
smooth();
background(#000000);

noStroke();
fill(#DEB305);
beginShape();
vertex(524, 496);
vertex(508, 501);
vertex(501, 532);
vertex(216, 705);
vertex(521, 703);
vertex(524, 496);
endShape(CLOSE);

noStroke();
fill(#A48109);
beginShape();
vertex(311, 647);
vertex(216, 705);
vertex(163, 593);
vertex(198, 590);
vertex(235, 621);
vertex(244, 641);
vertex(269, 641);
vertex(311, 647);
endShape(CLOSE);

noStroke();
fill(#B28B08);
beginShape();
vertex(163, 593);
vertex(147, 703);
vertex(216, 705);
vertex(163, 593);
endShape(CLOSE);

noStroke();
fill(#E3C04A);
beginShape();
vertex(147, 703);
vertex(0, 703);
vertex(177, 480);
vertex(179, 480);
vertex(174, 520);
vertex(198, 590);
vertex(163, 593);
vertex(147, 703);
endShape(CLOSE);

noStroke();
fill(#A3841D);
beginShape();
vertex(0,703);
vertex(0, 608);
vertex(177, 480);
vertex(0, 703);
endShape(CLOSE);

noStroke();
fill(#AB8507);
beginShape();
vertex(0, 608);
vertex(0, 479);
vertex(177, 480);
vertex(0, 608);
endShape(CLOSE);

// HALORING

noStroke();
fill(#C1C0BD);
beginShape();
vertex(184, 473);
vertex(179, 480);
vertex(0, 479);
vertex(0,417 );
vertex(37, 384);
vertex(84, 325);
vertex(92, 329);
vertex(95, 357);
vertex(133, 374);
vertex(160, 374);
vertex(184, 473);
endShape(CLOSE);

noStroke();
fill(#9C9C99);
beginShape();
vertex(92, 329);
vertex(84, 325);
vertex(113, 285);
vertex(161, 190);
vertex(213, 0);
vertex(351, 182);
vertex(317, 192);
vertex(235, 203);
vertex(92,329);
endShape(CLOSE);

noStroke();
fill(#838383);
beginShape();
vertex(213, 0);
vertex(399, 0);
vertex(524, 149);
vertex(351, 182);
vertex(213, 0);
endShape(CLOSE);

noStroke();
fill(#A9A9A9);
beginShape();
vertex(524, 149);
vertex(351, 182);
vertex(524, 175);
vertex(524, 149);
endShape(CLOSE);

noStroke();
fill(#5B5B5B);
beginShape();
vertex(524, 175);
vertex(351, 182);
vertex(411, 186);
vertex(524, 202);
vertex(524, 175);
endShape(CLOSE);

noStroke();
fill(#EAEAEA);
beginShape();
vertex(524, 202);
vertex(411, 186);
vertex(453, 202);
vertex(478, 220);
vertex(491, 233);
vertex(524, 202);
endShape(CLOSE);

noStroke();
fill(#A2A0A0);
beginShape();
vertex(524, 202);
vertex(491, 233);
vertex(524, 231);
vertex(524, 202);
endShape(CLOSE);

noStroke();
fill(#444444);
beginShape();
vertex(524, 231);
vertex(491, 233);
vertex(508, 256);
vertex(518, 274);
vertex(524, 288);
vertex(524, 231);
endShape(CLOSE);


//HELMENTBASE

noStroke();
fill(#1ED518);
beginShape();
vertex(92, 329);
vertex(95, 357);
vertex(122, 353);
vertex(123,322 );
vertex(92, 329);
endShape(CLOSE);

stroke(#13AD0E);
fill(#13AD0E);
beginShape();
vertex(92, 329);
vertex(235, 203);
vertex(317, 192);
vertex(283,226 );
vertex(211, 233);
vertex(123, 322);
vertex(92, 329);
endShape(CLOSE);

noStroke();
fill(#11890D);
beginShape();
vertex(123, 322);
vertex(123, 353);
vertex(143, 343);
vertex(145, 329);
vertex(147, 322);
vertex(123, 322);
endShape(CLOSE);

noStroke();
fill(#20BB1B);
beginShape();
vertex(145, 329);
vertex(147,322);
vertex(188, 285);
vertex(235, 281);
vertex(208,312 );
vertex(201, 322);
vertex(145, 329);
endShape(CLOSE);

noStroke();
fill(#24D61E);
beginShape();
vertex(123, 322);
vertex(211, 233);
vertex(188, 285);
vertex(147, 322);
vertex(123, 322);
endShape(CLOSE);

noStroke();
fill(#2D322D);
beginShape();
vertex(211, 233);
vertex(188, 285);
vertex(235, 281);
vertex(283,226 );
vertex(211, 233);
endShape(CLOSE);

noStroke();
fill(#0C7C0C);
beginShape();
vertex(208, 312);
vertex(208, 336);
vertex(201, 336);
vertex(201,322 );
vertex(208, 312);
endShape(CLOSE);

noStroke();
fill(#0C7C0C);
beginShape();
vertex(208, 336);
vertex(256, 336);
vertex(256, 309);
vertex(382,202 );
vertex(411, 186);
vertex(351, 181);
vertex(317, 192);
vertex(208, 312);
vertex(208, 336);
endShape(CLOSE);

noStroke();
fill(#238823);
beginShape();
vertex(256, 336);
vertex(256, 309);
vertex(382, 202);
vertex(411,186);
vertex(453, 202);
vertex(447, 233);
vertex(423, 247);
vertex(379, 223);
vertex(290, 309);
vertex(256, 336);
endShape(CLOSE);

noStroke();
fill(#04AC04);
beginShape();
vertex(256, 336);
vertex(290, 309);
vertex(341, 254);
vertex(406,267);
vertex(423, 247);
vertex(447, 233);
vertex(464, 294);
vertex(474, 318);
vertex(482, 336);
vertex(474, 336);
vertex(471, 333);
vertex(453, 332);
vertex(426, 336);
vertex(256, 336);
endShape(CLOSE);

noStroke();
fill(#147F14);
beginShape();
vertex(447, 233);
vertex(464, 294);
vertex(482, 336);
vertex(484,332 );
vertex(524, 332);
vertex(524, 288);
vertex(508, 257);
vertex(491, 233);
vertex(478, 220);
vertex(467, 226);
vertex(447, 233);
endShape(CLOSE);

noStroke();
fill(#2FA52F);
beginShape();
vertex(524, 332);
vertex(524, 418);
vertex(508, 418);
vertex(498,360);
vertex(495, 357);
vertex(495, 333);
vertex(524, 332);
endShape(CLOSE);

noStroke();
fill(#0F650F);
beginShape();
vertex(524, 430);
vertex(495, 432);
vertex(477, 429);
vertex(378, 497);
vertex(392, 534);
vertex(420, 514);
vertex(416, 573);
vertex(424, 552);
vertex(481, 535);
vertex(501, 532);
vertex(508, 501);
vertex(524, 497);
vertex(524, 430);
endShape(CLOSE);

noStroke();
fill(#0F650F);
beginShape();
vertex(310, 631);
vertex(273, 535);
vertex(222, 538);
vertex(208, 548);
vertex(225, 585);
vertex(232, 604);
vertex(235, 614);
vertex(235, 620);
vertex(244, 642);
vertex(269, 641);
vertex(289, 643);
vertex(310, 631);
endShape(CLOSE);

noStroke();
fill(#55B219);
beginShape();
vertex(378, 498);
vertex(392, 534);
vertex(420, 514);
vertex(416,573);
vertex(307, 624);
vertex(276, 545);
vertex(273, 535);
vertex(310, 521);
vertex(378, 497);
endShape(CLOSE);

noStroke();
fill(#4BBB03);
beginShape();
vertex(175, 514);
vertex(201, 532);
vertex(225, 585);
vertex(231, 604);
vertex(235, 614);
vertex(235, 620);
vertex(198, 590);
vertex(174, 520);
vertex(175, 514);
endShape(CLOSE);
//Inside Black Part of Helment 

noStroke();
fill(#C1C0BD);
beginShape();
vertex(201, 532);
vertex(225, 514);
vertex(273, 511);
vertex(273,535);
vertex(222, 538);
vertex(208, 548);
endShape(CLOSE);

noStroke();
fill(#C1C0BD);
beginShape();
vertex(379, 469);
vertex(426, 442);
vertex(430, 446);
vertex(379,477 );
vertex(379, 469);
endShape(CLOSE);

noStroke();
fill(#C1C0BD);
beginShape();
vertex(460, 343);
vertex(464, 400);
vertex(457, 408);
vertex(453, 415);
vertex(457, 418);
vertex(454, 414);
vertex(484, 394);
vertex(487, 376);
vertex(481, 358);
vertex(475, 352);
vertex(460, 343);
endShape(CLOSE);
//T
noStroke();
fill(#1D201B);
beginShape();
vertex(184, 473);
vertex(179, 480);
vertex(174, 514);
vertex(201,532 );
vertex(225, 514);
vertex(205, 497);
vertex(191, 490);
vertex(184, 473);
vertex(133, 374);
endShape(CLOSE);

noStroke();
fill(#3F403E);
beginShape();
vertex(205, 497);
vertex(225, 514);
vertex(273, 511);
vertex(314,490 );
vertex(266, 466);
vertex(215, 473);
vertex(205, 497);
endShape(CLOSE);

noStroke();
fill(#121312);
beginShape();
vertex(273, 511);
vertex(273, 535);
vertex(379, 497);
vertex(379, 453);
vertex(273, 511);
endShape(CLOSE);

noStroke();
fill(#323632);
beginShape();
vertex(379, 453);
vertex(379, 469);
vertex(426, 442);
vertex(409,435);
vertex(379, 453);
endShape(CLOSE);

noStroke();
fill(#2F352F);
beginShape();
vertex(379, 477);
vertex(379, 497);
vertex(457, 442);
vertex(430, 446);
vertex(379, 477);
endShape(CLOSE);

noStroke();
fill(#262826);
beginShape();
vertex(457, 442);
vertex(430, 446);
vertex(426, 442);
vertex(409, 435);
vertex(430, 425);
vertex(436, 414);
vertex(447, 411);
vertex(444, 425);
vertex(454, 415);
vertex(457, 418);
vertex(464, 414);
vertex(477, 429);
vertex(457, 442);
endShape(CLOSE);
//Z 

noStroke();
fill(#494B49);
beginShape();
vertex(402, 336);
vertex(413, 350);
vertex(416, 360);
vertex(433, 367);
vertex(443, 394);
vertex(436, 414);
vertex(447, 411);
vertex(443, 425);
vertex(454, 415);
vertex(457, 408);
vertex(463, 401);
vertex(460, 343);
vertex(453, 332);
vertex(426, 336);
vertex(402, 336);
endShape(CLOSE);

noStroke();
fill(#252925);
beginShape();
vertex(453, 332);
vertex(495, 333);
vertex(495, 357);
vertex(498, 360);
vertex(498, 374);
vertex(495, 377);
vertex(495, 432);
vertex(477, 429);
vertex(464, 414);
vertex(484, 394);
vertex(487, 376);
vertex(481, 358);
vertex(475, 352);
vertex(460, 343);
vertex(453, 332);
endShape(CLOSE);

noStroke();
fill(#383938);
beginShape();
vertex(402, 336);
vertex(201, 336);
vertex(160, 374);
vertex(263, 363);
vertex(269, 357);
vertex(412, 350);
vertex(402, 336);
endShape(CLOSE);

noStroke();
fill(#2E322E);
beginShape();
vertex(201, 336);
vertex(160, 374);
vertex(143, 343);
vertex(201, 336);
endShape(CLOSE);

noStroke();
fill(#4E4F4E);
beginShape();
vertex(143, 343);
vertex(123, 353);
vertex(95, 357);
vertex(133, 374);
vertex(160, 374);
vertex(143, 343);
endShape(CLOSE);

//VISOR

noStroke();
fill(#F07F0E);
beginShape();
vertex(160, 374);
vertex(184, 473);
vertex(191, 490);
vertex(201, 453);
vertex(263, 363);
vertex(160, 374);
endShape(CLOSE);

noStroke();
fill(#E3760A);
beginShape();
vertex(263, 363);
vertex(201, 453);
vertex(191, 490);
vertex(204, 497);
vertex(215, 473);
vertex(266, 466);
vertex(314, 490);
vertex(276, 445);
vertex(256, 428);
vertex(290, 398);
vertex(258, 407);
vertex(263, 363);
endShape(CLOSE);

noStroke();
fill(#DF8328);
beginShape();
vertex(263, 363);
vertex(269, 357);
vertex(338, 353);
vertex(338, 374);
vertex(334, 384);
vertex(258, 407);
vertex(263, 363);
endShape(CLOSE);

noStroke();
fill(#DA720C);
beginShape();
vertex(256, 428);
vertex(276, 445);
vertex(314, 490);
vertex(378, 453);
vertex(334, 384);
vertex(290, 398);
vertex(256, 428);
endShape(CLOSE);

noStroke();
fill(#E57506);
beginShape();
vertex(338, 353);
vertex(338, 374);
vertex(334, 384);
vertex(409, 435);
vertex(412, 350);
vertex(338, 353);
endShape(CLOSE);

noStroke();
fill(#D67616);
beginShape();
vertex(412, 350);
vertex(409, 435);
vertex(430, 425);
vertex(436, 414);
vertex(443, 394);
vertex(433, 367);
vertex(416, 360);
vertex(412, 350);
endShape(CLOSE);

noStroke();
fill(#D67616);
beginShape();
vertex(334, 384);
vertex(378, 453);
vertex(409, 435);
vertex(334, 384);
endShape(CLOSE);

noStroke();
fill(#0D7E07);
beginShape();
vertex(430, 193);
vertex(447, 233);
vertex(467, 226);
vertex(478, 220);
vertex(454, 202);
vertex(430, 193);
endShape(CLOSE);

noStroke();
fill(#9B9E9B);
beginShape();
vertex(399, 0);
vertex(524, 150);
vertex(524, 0);
vertex(399, 0);
endShape(CLOSE);
